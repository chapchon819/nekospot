<div class="md:flex md:mt-16">
  <div data-controller="sidebar">
    <%= render "spots/sidebar" %>
  </div>
  <div class="md:flex-1 md:pl-64">
    <div class="flex flex-col items-center justify-center">
      <div class="bg-white rounded-b-lg w-full">
      <%= render "shared/search" %>
      <div class="mx-auto flex w-11/12 max-w-md justify-center gap-2.5 pt-4 px-1 pb-6">
        <button onclick="showCurrentLocation()" class="w-1/2 btn inline-block rounded-full py-3 font-sans text-center text-sm font-semibold outline-none transition duration-100 text-secondary hover:bg-primary-hover bg-primary focus-visible:ring sm:w-1/2 md:w-1/2">
          <i class="ph-bold ph-gps fa-lg"></i> 現在地を表示
        </button>
        <button class="w-1/2 btn inline-block rounded-full py-3 font-sans text-center text-sm font-semibold outline-none transition duration-100 text-secondary hover:bg-primary-hover bg-primary focus-visible:ring sm:w-1/2 md:w-1/2"><i class="ph-bold ph-list-magnifying-glass fa-lg"></i> 絞り込み</button>
      </div>
      </div>
      <div id="map"
       data-cafe-icon="<%= asset_path('cafe.png') %>"
       data-zoo-icon="<%= asset_path('zoo.png') %>"
       data-island-icon="<%= asset_path('island.png') %>" 
       class="w-screen h-screen md:h-96 md:w-11/12 md:rounded-xl"></div>


  <div class="flex flex-col items-center justify-center md:my-8 bottom-0 w-full">
    <% @spots.each do |spot| %>
    <%= link_to spot_path(spot), class: "w-11/12 rounded-xl" do %>
      <div id="infoCard-<%= spot.id %>" class="hidden bg-white border rounded-xl shadow-sm flex mx-auto w-11/12 md:w-full absolute md:relative bottom-0 inset-x-0 z-10 md:mb-50 hover:shadow-lg group">
        <div class="flex-shrink-0 relative overflow-hidden h-33 w-32 md:w-1/3 md:rounded-se-none">
          <img id="spotImage-<%= spot.id %>" class="w-full h-full absolute top-0 rounded-l-xl left-0 object-cover transition-transform duration-200 ease-in-out group-hover:scale-110 group-hover:rounded-l-xl" src="" alt="Image Description">
        </div>
        <div class="flex flex-wrap">
          <div class="p-4 flex flex-col h-full sm:p-7">
            <h3 id="spotName-<%= spot.id %>" class="text-lg font-bold text-neutral font-zenmaru overflow-hidden whitespace-nowrap text-overflow-ellipsis"></h3>
            <div class="justify-start flex md:space-x-4 space-x-2 mt-2">
            <div class="inline-flex">
            <p id="spotCategory-<%= spot.id %>" class="text-xs text-white py-1 px-2 rounded-full bg-accent dark:text-neutral-500"></p>
            </div>
            <p id="spotRating-<%= spot.id %>" class="text-secondary"></p>
            </div>
          </div>
        </div>
      </div>
    <% end %>
    <% end %>
  </div>
  </div>
  </div>
</div>

<script>
let map, marker, markers = [];
var apiKey = gon.api_key;

const latlngDis = document.getElementById('latlngDisplay');
const addressDis = document.getElementById('addressDisplay');

function initMap() {
  const geocoder = new google.maps.Geocoder();
  map = new google.maps.Map(document.getElementById('map'), { 
    zoom: 12
     });

  var spots = gon.spots;
  let mapElement = document.getElementById('map');
  let icons = {
  "猫カフェ": {
    url: mapElement.dataset.cafeIcon,
    size: new google.maps.Size(52, 52),
    scaledSize: new google.maps.Size(52, 52)
  },
  "動物園": {
    url: mapElement.dataset.zooIcon,
    size: new google.maps.Size(52, 52),
    scaledSize: new google.maps.Size(52, 52)
  },
  "島": {
    url: mapElement.dataset.islandIcon,
    size: new google.maps.Size(52, 52),
    scaledSize: new google.maps.Size(52, 52)
  }
};

centerPin = new google.maps.Marker({
  map: map,
  draggable: true,
  position: map.getCenter(), // 初期位置をマップの中心に設定
  title: "現在地"
});


spots.forEach(function(spot) {
  let marker = new google.maps.Marker({
    map: map,
    position: { lat: parseFloat(spot.latitude), lng: parseFloat(spot.longitude) },
    title: spot.name,
    icon: icons[spot.category] || null // デフォルトアイコンを設定
  });

    markers.push(marker);  // マーカーを配列に追加

    marker.addListener('click', function() {
      updateInfoCard(spot);
    });
  });

  // ピンのドラッグ終了イベント
  centerPin.addListener('dragend', function() {
    map.setCenter(centerPin.getPosition());
    updateSpotsList(); // スポットリストを更新
  });

  // マップのドラッグ終了イベント
  map.addListener('dragend', function() {
    centerPin.setPosition(map.getCenter());
    updateSpotsList(); // スポットリストを更新
  });

  // スポットの初期化とリスナーの設定...
  initSpots();

  // 現在地の読み込み
  showCurrentLocation();
}

function updateInfoCard(spot) {
  // 他の全ての情報カードを非表示にする
  document.querySelectorAll('[id^="infoCard-"]').forEach(card => {
    card.classList.add('hidden');
  });
  
  var infoCardId = 'infoCard-' + spot.id;
  var infoCard = document.getElementById(infoCardId);
  if (infoCard) {
    infoCard.classList.remove('hidden');
    const imageUrl = `https://maps.googleapis.com/maps/api/place/photo?maxheight=1000&maxwidth=1000&photo_reference=${spot.image}&key=${apiKey}`;
    infoCard.querySelector(`#spotImage-${spot.id}`).src = imageUrl;
    infoCard.querySelector(`#spotName-${spot.id}`).textContent = spot.name;
    infoCard.querySelector(`#spotRating-${spot.id}`).textContent = `⭐️ ${spot.rating}`;
    infoCard.querySelector(`#spotCategory-${spot.id}`).textContent = spot.category;
  } else {
    console.error('Info card element not found:', infoCardId);
  }
}

function codeAddress() {
  const geocoder = new google.maps.Geocoder();
  const inputAddress = document.getElementById('address').value;
  geocoder.geocode({ 'address': inputAddress }, function(results, status) {
    if (status === 'OK') {
      map.setCenter(results[0].geometry.location);
      marker.setPosition(results[0].geometry.location);
      latlngDis.innerHTML = `Latitude: ${results[0].geometry.location.lat()}, Longitude: ${results[0].geometry.location.lng()}`;
      addressDis.innerHTML = results[0].formatted_address;
    } else {
      alert("該当する結果がありませんでした：" + status);
    }
  });
}

function showCurrentLocation(){
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
            const userLocation = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };
            map.setCenter(userLocation);
            centerPin.setPosition(userLocation);
          }, function() {
            alert('位置情報の取得に失敗しました。');
            map.setCenter({ lat: 35.6803997, lng: 139.7690174 }); // 東京の座標
        });
    } else {
        alert('お使いのブラウザでは地理位置情報の取得がサポートされていません。');
        map.setCenter({ lat: 35.6803997, lng: 139.7690174 }); // 東京の座標
    }
}

function updateSpotsList() {
    navigator.geolocation.getCurrentPosition(function(position) {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;

        const frame = document.querySelector("#spots_list");
        const newSrc = `/spots/list?latitude=${lat}&longitude=${lng}`;
        if (frame.src !== newSrc) {
            frame.src = newSrc;  // srcが現在設定されているものと異なる場合のみ更新
        }
    }, function(error) {
        console.error('Geolocation error:', error);
    });
}

document.addEventListener("turbo:load", function() {
  if (!map) initMap(); // マップが初期化されていなければ初期化
  showCurrentLocation();
  updateSpotsList();
});

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GMAP_API_KEY'] %>&callback=initMap" async defer></script>